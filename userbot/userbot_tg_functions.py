import requests
import asyncio
import random
import time
import os
from io import BytesIO
from src.vk_video_downloader import get_vk_video_info, download_vk_video
from loguru import logger
from dataclasses import dataclass
from typing import Optional


# –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
@dataclass
class PostResult:
    success: bool
    group_name: str
    post_url: Optional[str] = None
    error: Optional[str] = None


# üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≤ BufferedInputFile
# def download_to_buffer(url: str, filename: str = "file") -> BufferedInputFile:
#     response = requests.get(url)
#     response.raise_for_status()
#     return BufferedInputFile(response.content, filename=filename)

# üîß –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç BytesIO (Telethon-friendly)
def download_to_buffer(url: str, filename: str = "file") -> BytesIO:
    logger.info(f"–°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –ø–æ URL: {url}")
    
    for attempt in range(3):
        current_attempt = attempt + 1
        try:
            response = requests.get(url, timeout=30)
            response.raise_for_status()
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {current_attempt}/3 | ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å ({len(response.content)} –±–∞–π—Ç)")
            break
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ Timeout
        except requests.exceptions.Timeout as e:
            if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫")
                raise
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 | –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}")
            continue
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        except requests.exceptions.RequestException as e:
            if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url} –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
                raise
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: {e} | –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}")
            continue

    buffer = BytesIO(response.content)
    buffer.name = filename  # Telethon –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–º—è –ø—Ä–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ç–∏–ø–∞—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
    # logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å ({len(response.content)} –±–∞–π—Ç)")
    return buffer


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—É–∑
async def sleep_with_log(min_sec=8, max_sec=11):
    delay = random.uniform(min_sec, max_sec)
    logger.info(f"‚è≥ –ñ–¥—ë–º {delay:.2f} —Å–µ–∫—É–Ω–¥...")
    await asyncio.sleep(delay)


async def userbot_post_to_channel(bot, channel_id, prepared_data):
    text = prepared_data.get("text", "").strip()
    media_urls = prepared_data.get("media_urls", [])
    gif_urls = prepared_data.get("gif_urls", [])
    video_urls = prepared_data.get("video_urls", [])
    link_preview = prepared_data.get("link_preview")
    link_preview_photo_url = link_preview.get("photo_url") if isinstance(link_preview, dict) else None
    group_name = prepared_data.get("group_name", "Unknown Group")
    original_post_url = prepared_data.get("original_post_url", "There is no post URL")
    post_date = prepared_data.get("post_date", "There is no post date")

    # –ï—Å–ª–∏ channel_id —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
    post_link_prefix = f"https://t.me/{channel_id.username}" if getattr(channel_id, "username", None) else None

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    post_info_msg = True

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
    channel_error_msg = True

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
    def build_post_link(message_id):
        if post_link_prefix:
            # –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
            return f"{post_link_prefix}/{message_id}"
        # –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        elif isinstance(channel_id, int):
            clean_id = abs(channel_id) % (10 ** 10)
            return f"https://t.me/c/{clean_id}/{message_id}"
        else:
            return None

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    async def send_info_message(bot, entity, post_date, group_name, original_post_url, link_preview=False):
        info_text = (
            f"üïí –ö–æ–≥–¥–∞: {post_date}\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
            f"üîó –ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}\n"
            f"üìñ –¢–∏–ø: {scenario_name}"
        )
        await bot.send_message(entity, info_text, link_preview=link_preview)

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 0: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –ø–æ—Å—Ç ---
    if not text and not media_urls and not gif_urls and not video_urls and not link_preview_photo_url:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
        return PostResult(success=False, group_name=prepared_data.get("group_name", "Unknown Group"),
                          error="–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç ---
    if not media_urls and not gif_urls and not video_urls and not link_preview_photo_url:
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 1 ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç"
        logger.info(scenario_name)
        logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name}")
        logger.info(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if post_info_msg:
            try:
                await send_info_message(bot, channel_id, post_date, group_name, original_post_url)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            message = await bot.send_message(
                entity=channel_id,
                message=text,
                link_preview=True
            )
            logger.info("‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            # await sleep_with_log()
            # post_link = f"https://t.me/{channel_id.lstrip('@')}/{message.id}"
            post_link = build_post_link(message.id)

            return PostResult(success=True, group_name=group_name, post_url=post_link)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")

            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            if channel_error_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ channel_error_msg —Ä–∞–≤–µ–Ω True
                await bot.send_message(
                    entity=channel_id,
                    message=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}"
                )
            return PostResult(success=False, group_name=group_name, error=str(e))

    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–¥–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ + —Ç–µ–∫—Å—Ç ---
    elif len(media_urls) == 1 and not gif_urls:
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 2 ‚Äî –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ + —Ç–µ–∫—Å—Ç"
        img_url = media_urls[0]
        logger.info(f"{scenario_name}: {img_url}")
        logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name}")
        logger.info(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if post_info_msg:
            try:
                await send_info_message(bot, channel_id, post_date, group_name, original_post_url)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            input_file = download_to_buffer(img_url, filename="vk_image.jpg")
            caption = text if len(text) <= 2040 else None
            message = await bot.send_file(
                entity=channel_id,
                file=input_file,
                caption=caption
            )
            # await sleep_with_log()

            if len(text) > 2040:
                await bot.send_message(entity=channel_id, message=text)
                logger.info("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            else:
                logger.info("üñº –ö–∞—Ä—Ç–∏–Ω–∫–∞ + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

            # post_link = f"https://t.me/{channel_id.lstrip('@')}/{message.id}"
            post_link = build_post_link(message.id)
            return PostResult(success=True, group_name=group_name, post_url=post_link)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}")

            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            if channel_error_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ channel_error_msg —Ä–∞–≤–µ–Ω True
                await bot.send_message(
                    entity=channel_id,
                    message=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {e}"
                )
            return PostResult(success=False, group_name=group_name,
                              error=str(e))  # –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º dataclass —Å –æ—à–∏–±–∫–æ–π


    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 3: –û–¥–Ω–∞ GIF-–∞–Ω–∏–º–∞—Ü–∏—è + —Ç–µ–∫—Å—Ç ---
    elif len(gif_urls) == 1:
        gif_url = gif_urls[0]
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 3 ‚Äî –æ–¥–Ω–∞ GIF + —Ç–µ–∫—Å—Ç"
        logger.info(f"{scenario_name}: {gif_url}")
        logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name}")
        logger.info(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if post_info_msg:
            try:
                await send_info_message(bot, channel_id, post_date, group_name, original_post_url)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            input_file = download_to_buffer(gif_url, filename="vk_animation.gif")
            caption = text if len(text) <= 2040 else None
            gif_msg = await bot.send_file(
                entity=channel_id,
                file=input_file,
                caption=caption
            )
            results = [gif_msg]
            # await sleep_with_log()

            if len(text) > 2040:
                text_msg = await bot.send_message(entity=channel_id, message=text)
                results.append(text_msg)
                # await sleep_with_log()
                logger.info("‚úÖ GIF + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            else:
                logger.info("‚úÖ GIF + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

            # post_link = f"https://t.me/{channel_id.lstrip('@')}/{gif_msg.id}"
            post_link = build_post_link(gif_msg.id)
            return PostResult(success=True, group_name=group_name, post_url=post_link)  # –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º dataclass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}")

            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            if channel_error_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ channel_error_msg —Ä–∞–≤–µ–Ω True
                await bot.send_message(
                    entity=channel_id,
                    message=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}"
                )
            return PostResult(success=False, group_name=group_name,
                              error=str(e))  # –ò–ó–ú–ï–ù–ï–ù–û: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º dataclass —Å –æ—à–∏–±–∫–æ–π


    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 4: –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ + —Ç–µ–∫—Å—Ç ---
    elif len(media_urls) > 1:
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 4 ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ + —Ç–µ–∫—Å—Ç"
        logger.info(scenario_name)
        logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name}")
        logger.info(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}")
        media_files = []

        for i, url in enumerate(media_urls):
            try:
                input_file = download_to_buffer(url, filename=f"vk_image_{i}.jpg")
                media_files.append(input_file)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {url}: {e}")

        if not media_files:
            logger.error("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return PostResult(success=False, group_name=group_name, error="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if post_info_msg:
            try:
                await send_info_message(bot, channel_id, post_date, group_name, original_post_url)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            caption = text if len(text) <= 2040 else None
            group_msg = await bot.send_file(
                entity=channel_id,
                file=media_files,
                caption=caption
            )
            # group_msg –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            messages = group_msg if isinstance(group_msg, list) else [group_msg]
            # await sleep_with_log()

            if 2040 < len(text) <= 4050:
                text_msg = await bot.send_message(entity=channel_id, message=text)
                messages.append(text_msg)
                # await sleep_with_log()
                logger.info("‚úÖ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            else:
                logger.info("‚úÖ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
            first_msg = messages[0]
            # post_link = f"https://t.me/{channel_id.lstrip('@')}/{first_msg.id}"
            post_link = build_post_link(first_msg.id)

            return PostResult(success=True, group_name=group_name, post_url=post_link)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")

            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            if channel_error_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ channel_error_msg —Ä–∞–≤–µ–Ω True
                await bot.send_message(
                    entity=channel_id,
                    message=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}"
                )
            return PostResult(success=False, group_name=group_name, error=str(e))


    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 5: –ü—Ä–µ–≤—å—é-—Å—Å—ã–ª–∫–∞ + —Ç–µ–∫—Å—Ç ---
    elif link_preview_photo_url:
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 5 ‚Äî –ø—Ä–µ–≤—å—é + —Ç–µ–∫—Å—Ç"
        logger.info(scenario_name)
        logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name}")
        logger.info(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if post_info_msg:
            try:
                await send_info_message(bot, channel_id, post_date, group_name, original_post_url)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            input_file = download_to_buffer(link_preview_photo_url, filename="vk_link_preview.jpg")
            caption = text if len(text) <= 2040 else None
            msg = await bot.send_file(
                entity=channel_id,
                file=input_file,
                caption=caption
            )
            # await sleep_with_log()

            if len(text) > 2040:
                await bot.send_message(entity=channel_id, message=text)
                logger.info("üñº –ü—Ä–µ–≤—å—é + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
            else:
                logger.info("üñº –ü—Ä–µ–≤—å—é + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

            # post_link = f"https://t.me/{channel_id.lstrip('@')}/{msg.id}"
            post_link = build_post_link(msg.id)
            return PostResult(success=True, group_name=group_name, post_url=post_link)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {e}")

            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
            if channel_error_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ channel_error_msg —Ä–∞–≤–µ–Ω True
                await bot.send_message(
                    entity=channel_id,
                    message=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–≤—å—é: {e}"
                )
            return PostResult(success=False, group_name=group_name, error=str(e))


    # --- –°—Ü–µ–Ω–∞—Ä–∏–π 6: –í–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç ---
    elif video_urls:
        scenario_name = "–°—Ü–µ–Ω–∞—Ä–∏–π 6 ‚Äî –≤–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç"
        logger.info(scenario_name)
        logger.info(f"–ì—Ä—É–ø–ø–∞: {group_name}")
        logger.info(f"–ü–µ—Ä–≤–æ–∏—Å—Ç–æ—á–Ω–∏–∫: {original_post_url}")
        any_success = False
        last_post_link = None
        error_messages = []

        for video_url in video_urls:
            video_info = get_vk_video_info(video_url)
            if not video_info:
                logger.error(f"‚ùå –ù–µ—Ç –∏–Ω—Ñ—ã –ø–æ –≤–∏–¥–µ–æ: {video_url}")
                error_messages.append(f"–ù–µ—Ç –∏–Ω—Ñ—ã –ø–æ –≤–∏–¥–µ–æ: {video_url}")
                continue

            # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–∞, –∞ —Ç–µ–ø–µ—Ä—å –≤–∞—â–µ –Ω–µ –Ω—É–∂–Ω–∞ –ø–æ—Ö–æ–¥—É. –ù–æ –ø–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä—É—é
            # filesize = video_info.get("filesize") or video_info.get("filesize_approx") or 0
            # if filesize > 0:
            #     filesize_mb = filesize / (1024 * 1024)
            #     if filesize_mb > 250:
            #         logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ –±–æ–ª—å—à–µ 250MB ({filesize_mb:.2f}MB), –ø—Ä–æ–ø—É—â–µ–Ω–æ: {video_url}")
            #         error_messages.append(f"–í–∏–¥–µ–æ –±–æ–ª—å—à–µ 250MB ({filesize_mb:.2f}MB): {video_url}")
            #         continue

            duration = video_info.get("duration", 0)
            if duration > 1800:
                logger.warning(f"‚è≥ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ {duration} —Å–µ–∫: {video_url}, –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                error_messages.append(f"‚è≥ –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ ({duration} —Å–µ–∫): {video_url}")
                print()  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø —á—Ç–æ –±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–∫–ª–µ–∏–≤–∞–ª–æ—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏–µ–π
                continue

            video_file_path = download_vk_video(video_url)
            if not video_file_path or not os.path.isfile(video_file_path):
                logger.error(f"‚ùå –í–∏–¥–µ–æ-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_file_path}")
                error_messages.append(f"–í–∏–¥–µ–æ-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_file_path}")
                continue

            file_size_mb = os.path.getsize(video_file_path) / (1024 * 1024)
            if file_size_mb > 250:
                logger.warning(f"‚ö†Ô∏è –í–∏–¥–µ–æ –±–æ–ª—å—à–µ 250MB ({file_size_mb:.2f}MB), –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                error_messages.append(f"–í–∏–¥–µ–æ –±–æ–ª—å—à–µ 250MB ({file_size_mb:.2f}MB): {video_url}")
                continue

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if post_info_msg:
                try:
                    await send_info_message(bot, channel_id, post_date, group_name, original_post_url)
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"üìπ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} MB")
            logger.info(f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {duration} —Å–µ–∫")
            
            for attempt in range(3):
                try:
                    caption = text if len(text) <= 2040 else None
                    logger.info(f"üìπ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3)...")
                    start_time = time.monotonic()
                    msg = await bot.send_file(
                        entity=channel_id,
                        file=video_file_path,
                        caption=caption
                    )
                    end_time = time.monotonic()
                    logger.info(f"üëç –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
                    # await sleep_with_log()
                    any_success = True
                    # last_post_link = f"https://t.me/{channel_id.lstrip('@')}/{msg.id}"
                    last_post_link = build_post_link(msg.id)

                    if len(text) > 2040:
                        await bot.send_message(entity=channel_id, message=text)
                        logger.info("‚úÖ –í–∏–¥–µ–æ + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏")
                    else:
                        logger.info("‚úÖ –í–∏–¥–µ–æ + –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")
                    
                    break  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

                except ConnectionError as e:
                    logger.warning(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3): {e}")
                    if attempt < 2:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        delay = 5 * (attempt + 1)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 5, 10, 15 —Å–µ–∫
                        logger.info(f"‚è≥ –ñ–¥—ë–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                        await asyncio.sleep(delay)
                    else:
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
                        error_messages.append(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video_url}: {e}")
                        if channel_error_msg:
                            await bot.send_message(
                                entity=channel_id,
                                message=f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {video_url}"
                            )

                except Exception as e:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {type(e).__name__}: {e}")
                    logger.error(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size_mb:.2f} MB, –ø—É—Ç—å: {video_file_path}")
                    
                    # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª
                    if channel_error_msg:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ channel_error_msg —Ä–∞–≤–µ–Ω True
                        await bot.send_message(
                            entity=channel_id,
                            message=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ + —Ç–µ–∫—Å—Ç: {video_url}: {e}"
                        )
                    error_messages.append(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ {video_url}: {e}")
                    break  # –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫–∏

        if any_success:
            return PostResult(success=True, group_name=group_name, post_url=last_post_link)
        else:
            error_text = "; ".join(error_messages) if error_messages else "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ –≤–∏–¥–µ–æ"
            return PostResult(success=False, group_name=group_name, error=error_text)

    else:
        logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è prepared_data")
        return PostResult(success=False, group_name=group_name, error="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è prepared_data")
