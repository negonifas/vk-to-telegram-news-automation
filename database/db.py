import asyncpg
from loguru import logger
import os
from dotenv import load_dotenv
import asyncio
import time


load_dotenv()

async def create_db_pool(max_retries: int = 5, delay: int = 3):
    """
    –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–æ–º –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ.

    :param max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    :param delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    :return: asyncpg pool
    :raises Exception: –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
    """
    attempt = 1

    while attempt <= max_retries:
        try:
            logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ #{attempt} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            pool = await asyncpg.create_pool(
                user=os.getenv("DB_USER"),
                password=os.getenv("DB_PASS"),
                database=os.getenv("DB_NAME"),
                host=os.getenv("DB_HOST"),
                port=os.getenv("DB_PORT", "5432"),
                min_size=1,
                max_size=10,
                timeout=10  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ ‚Äî –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–æ–Ω–Ω–µ–∫—Ç
            )
            logger.success("‚úÖ Database pool created successfully.")
            return pool

        except (asyncio.TimeoutError, OSError, ConnectionError) as conn_err:
            logger.warning(f"‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–ø–æ–ø—ã—Ç–∫–∞ #{attempt}): {conn_err}")
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ #{attempt}): {e}")

        if attempt < max_retries:
            await asyncio.sleep(delay)
            attempt += 1
        else:
            break

    logger.critical(f"‚ùå –í—Å–µ {max_retries} –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
    raise RuntimeError("Failed to create database pool after multiple attempts.")


async def create_db_pool_diagnostic(
    max_retries: int = 5,
    delay: int = 3,
    enable_ssl: bool = True,
    show_connection_params: bool = True,
):
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
    –õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.

    :param max_retries: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø—Ä–æ–±–æ–≤–∞—Ç—å
    :param delay: –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    :param enable_ssl: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ SSL-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    :param show_connection_params: –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫—Ä–æ–º–µ –ø–∞—Ä–æ–ª—è)
    :return: asyncpg.Pool
    """
    attempt = 1

    db_params = {
        "user": os.getenv("DB_USER"),
        "password": os.getenv("DB_PASS"),
        "database": os.getenv("DB_NAME"),
        "host": os.getenv("DB_HOST"),
        "port": int(os.getenv("DB_PORT", "5432")),
        "min_size": 1,
        "max_size": 10,
        "timeout": 10,
        "ssl": "require" if enable_ssl else None,
    }

    if show_connection_params:
        safe_params = db_params.copy()
        safe_params.pop("password", None)
        logger.info(f"üõ† –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {safe_params}")

    while attempt <= max_retries:
        logger.info(f"üîå –ü–æ–ø—ã—Ç–∫–∞ #{attempt} —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        start = time.perf_counter()

        try:
            pool = await asyncpg.create_pool(**db_params)
            duration = time.perf_counter() - start
            logger.success(f"‚úÖ –ü—É–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {duration:.2f} —Å–µ–∫ (–ø–æ–ø—ã—Ç–∫–∞ #{attempt})")
            return pool

        except (asyncio.TimeoutError, OSError, ConnectionError) as conn_err:
            duration = time.perf_counter() - start
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{attempt} (–≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫): {conn_err}")

        except Exception as e:
            duration = time.perf_counter() - start
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ #{attempt} (–≤—Ä–µ–º—è: {duration:.2f} —Å–µ–∫): {e}")

        if attempt < max_retries:
            logger.info(f"‚è≥ –ñ–¥—ë–º {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            await asyncio.sleep(delay)
            attempt += 1
        else:
            break

    logger.critical("‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã.")
    raise RuntimeError("Failed to create pool after multiple retries.")

# async def test_connection():
#     try:
#         pool = await asyncpg.create_pool(
#             user=os.getenv("DB_USER"),
#             password=os.getenv("DB_PASS"),
#             database=os.getenv("DB_NAME"),
#             host=os.getenv("DB_HOST"),
#             port=int(os.getenv("DB_PORT", 5432)),
#             min_size=1,
#             max_size=5
#         )
#         async with pool.acquire() as conn:
#             result = await conn.fetch("SELECT now()")
#             print("‚úÖ Connected! Time on server:", result[0]["now"])
#         await pool.close()
#     except Exception as e:
#         print("‚ùå Connection failed:", e)
#
# if __name__ == "__main__":
#     asyncio.run(test_connection())