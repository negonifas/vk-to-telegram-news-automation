import json
import asyncio
import sys
import os
import time
import dotenv
from telethon import TelegramClient
from userbot.userbot_tg_functions import PostResult  # –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
from telethon.tl.types import PeerChannel  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
from userbot.userbot_tg_functions import userbot_post_to_channel
from src.text_processing.pipeline import process_posts
from database.db import create_db_pool, create_db_pool_diagnostic
from src.config_channels import channel_list
from config import credentials
# from run import prepare_vk_post_for_tg
from src.text_processing.pipeline import get_vk_last_posts, prepare_vk_post_for_tg
from loguru import logger
from pprint import pprint
from src.text_processing.functions import sleep_with_log

dotenv.load_dotenv()

# =============================
# –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º VK
# =============================

def load_test_posts(filepath: str) -> list:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ (list of dict).
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω ‚Äî –≤—ã–≤–æ–¥–∏—Ç –æ—à–∏–±–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É.
    """
    try:
        with open(filepath, "r", encoding="utf-8") as f:
            data = json.load(f)
        if not isinstance(data, list):
            print(f"‚ùå –û—à–∏–±–∫–∞: –û–∂–∏–¥–∞–ª—Å—è —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ {filepath}, –∞ –ø–æ–ª—É—á–µ–Ω–æ: {type(data)}")
            sys.exit(1)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ '{filepath}'")
        return data
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filepath}")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {filepath}: {e}")
        sys.exit(1)

async def main(token: str):
    # –°—Ç–∞—Ä—Ç —Å–µ—Å—Å–∏–∏
    start_time1 = time.monotonic()
    
    # –ö–æ–ª-–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    count = 3

    # 0. –°–æ–∑–¥–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    try:
        pool = await create_db_pool()
        logger.info("üîÑ –°–æ–∑–¥–∞–ª–∏ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    except RuntimeError as e:
        logger.critical(f"üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: {e}")
        return
    
#     # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î
#     pool = await create_db_pool_diagnostic(
#     max_retries=3,
#     delay=2,
#     enable_ssl=False,  # –ø–æ–ø—Ä–æ–±—É–π –±–µ–∑ SSL
#     show_connection_params=True
# )
#     logger.info("üîÑ –°–æ–∑–¥–∞–ª–∏ –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
#     while True:
#         user_input = input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ !!! –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
#         if user_input == "!!!":
#             print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
#             sys.exit(0)
#         elif user_input == "":
#             break


    # # 0.1 –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    # async with pool.acquire() as conn:
    #     await conn.execute("TRUNCATE TABLE posts RESTART IDENTITY CASCADE;")
    #     await conn.execute("TRUNCATE TABLE skipped_posts RESTART IDENTITY CASCADE;")
    # logger.info("üóëÔ∏è –¢–∞–±–ª–∏—Ü—ã 'posts' –∏ 'skipped_posts' –æ—á–∏—â–µ–Ω—ã.")
    # while True:
    #     user_input = input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ !!! –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    #     if user_input == "!!!":
    #         print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    #         sys.exit(0)
    #     elif user_input == "":
    #         break  # —Ç–æ–ª—å–∫–æ Enter –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    
    # 1. –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã –∏–∑ VK —á–µ—Ä–µ–∑ –ø–∞—Ä—Å–µ—Ä
    print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã –∏–∑ VK...")
    
    posts, vk_stats = get_vk_last_posts(
        access_token=token,
        group_names=channel_list,
        count=count,
        save_path=None,
        delay_between_requests=0.3
    )
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞ VK
    logger.info(f"üìä VK Parsing Stats: {vk_stats['processed_groups']}/{vk_stats['total_groups']} groups, {vk_stats['total_posts']} posts, {vk_stats['reposts']} reposts")

    # pprint(posts)

    # # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    # while True:
    #     user_input = input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ !!! –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    #     if user_input == "!!!":
    #         print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    #         sys.exit(0)
    #     elif user_input == "":
    #         break
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–π group_name
    group_counts = {}
    for item in posts:
        group_name = item['group_name']
        group_counts[group_name] = group_counts.get(group_name, 0) + 1
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ –ø–æ—Å—Ç–æ–≤ {count} –∏–∑ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã.\n"
          f"–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã: {group_counts}\n"
          f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
    
    # while True:
    #     user_input = input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ !!! –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
    #     if user_input == "!!!":
    #         print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
    #         sys.exit(0)
    #     elif user_input == "":
    #         break  # —Ç–æ–ª—å–∫–æ Enter –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ


    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å—Ç—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ç.–¥.)
    prepared_posts, filtered_out_count = prepare_vk_post_for_tg(posts, interleave_groups=True)
    
    # # –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø—Ä–µ-–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
    # pprint(prepared_posts)

    print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(prepared_posts)} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {filtered_out_count} –ü—Ä–∏—á–∏–Ω–∞: –†–µ–ø–æ—Å—Ç\n")

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
    while True:
        user_input = input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ !!! –¥–ª—è –≤—ã—Ö–æ–¥–∞\n")
        if user_input == "!!!":
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            sys.exit(0)
        elif user_input == "":
            break


    # 2. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏
    stats, approved_posts = await process_posts(prepared_posts, pool)
    # logger.info(f"‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
    # 3. –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\n=== –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===")
    for k, v in stats.items():
        print(f"{k}: {v}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É
    if stats['inserted'] > 0:
        print(f"\n‚úÖ –í –±–∞–∑—É –∑–∞–ø–∏—Å–∞–Ω–æ {stats['inserted']} –ø–æ—Å—Ç–æ–≤")
        print(f"üì§ –ì–æ—Ç–æ–≤–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram {len(approved_posts)} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    else:
        print("\n‚ö†Ô∏è –í –±–∞–∑—É –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –æ—Ç–º–µ–Ω–µ–Ω–∞")

    # 4.1 –ò–Ω–∏—Ü–∏–∏–ª–∏–∑–∞—Ü–∏—è TG userbot
    api_id = int(os.getenv("API_ID"))
    api_hash = os.getenv("API_HASH")
    session_name = os.getenv("SESSION_NAME")
    bot = TelegramClient(session_name, api_id, api_hash)  # –¥–ª—è Telethon
    try:
        await bot.start()
        logger.info("üëç Telethon-–∫–ª–∏–µ–Ω—Ç / userbot –∑–∞–ø—É—â–µ–Ω")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ Telethon-–∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return
    
    # 4.2 –ü—É–±–ª–∏–∫—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –¢–ì
    start_time2 = time.monotonic()
    post_count = 0
    error_count = 0
    # channel_id = os.getenv("PUBLIC_TG_CHANNEL_ID")  # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª
    channel_id = os.getenv("PRIVATE_TG_CHANNEL_ID")  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª

    # ~~~ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ ~~~
    channel_entity = None
    # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–π –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª—ã
    try:
        if channel_id and channel_id.isdigit():
            # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª ‚Äî –ø–µ—Ä–µ–¥–∞–Ω —á–∏—Å–ª–æ–≤–æ–π ID
            channel_entity = await bot.get_entity(PeerChannel(int(channel_id)))
        else:
            # –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª ‚Äî –ø–µ—Ä–µ–¥–∞–Ω username (—Å—Ç—Ä–æ–∫–∞ —Å @)
            channel_entity = await bot.get_entity(channel_id)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞: {e}")

    # ~~~ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã ~~~
    try:
        if approved_posts: # –ò—Å–ø–æ–ª—å–∑—É–µ–º approved_posts
            for prepared_data in approved_posts: # –ò—Å–ø–æ–ª—å–∑—É–µ–º approved_posts
                try:
                    result = await userbot_post_to_channel(  # –¥–ª—è Telethon
                        bot=bot,
                        channel_id=channel_entity,
                        prepared_data=prepared_data,
                    )
                    if not isinstance(result, PostResult):
                        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç userbot_post_to_channel")
                        error_count += 1
                        continue

                    if result.success:
                        post_count += 1
                        logger.success(f"üéâ –ü–æ—Å—Ç: {post_count} –∏–∑ –≥—Ä—É–ø–ø—ã '{result.group_name}' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")
                        if result.post_url:
                            logger.info(f"üîó {result.post_url}")
                        await sleep_with_log(1, 3)
                    else:
                        error_count += 1
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –≥—Ä—É–ø–ø—ã '{result.group_name}': {result.error}")
                        logger.error("\n" + "=" * 120 + "\n")

                except Exception as e:
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {e}")
                    error_count += 1
        else:
            logger.warning("–ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

        logger.success(f"‚úÖ –ò—Ç–æ–≥: {post_count} –ø–æ—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ, {error_count} –æ—à–∏–±–æ–∫.")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–æ–≤: {e}")

    finally:
        await bot.disconnect()  # –¥–ª—è telethon
    
    # 5. –¢–æ—á–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    await pool.close()
    logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã.")

    end_time = time.monotonic()
    total_time = end_time - start_time1
    total_time2 = end_time - start_time2

    minutes, seconds = divmod(total_time, 60)
    minutes2, seconds2 = divmod(total_time2, 60)

    logger.info(f"üì© –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è TG-—Ñ—É–Ω–∫—Ü–∏–∏ build_post_link: {int(minutes2)} –º–∏–Ω {int(seconds2)} —Å–µ–∫")
    logger.info(f"‚è± –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π main: {int(minutes)} –º–∏–Ω {int(seconds)} —Å–µ–∫")
    

if __name__ == "__main__":
    try:
        asyncio.run(main(os.getenv("VK_API_TOKEN")))
    except Exception as e:
        logger.exception(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ main(): {e}")
 

# 1) source .venv/bin/activate
# 2) Enter 'python -m src.run_temp' in terminal to run the script