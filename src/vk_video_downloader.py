import os
import re
import time
from pprint import pprint
from typing import Optional
from yt_dlp import YoutubeDL
from loguru import logger
from moviepy import VideoFileClip


def download_vk_video(video_url, output_path='./videos/'):
    os.makedirs(output_path, exist_ok=True)

    ydl_opts = {
        'format': 'best',
        'quiet': True,
        # 'proxy': 'socks5h://[::1]:2080',
    }

    with YoutubeDL(ydl_opts) as ydl:
        try:
            info_dict = ydl.extract_info(video_url, download=True)
            original_path = ydl.prepare_filename(info_dict)

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            title = info_dict.get('title', 'video').lower()
            title = re.sub(r'[\s\-]+', '_', title)            # –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ —Ç–∏—Ä–µ –Ω–∞ _
            title = re.sub(r'[^\w_]', '', title)              # —É–¥–∞–ª—è–µ–º –≤—Å—ë –ª–∏—à–Ω–µ–µ
            title = title[:100]                               # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–ø–æ –∂–µ–ª–∞–Ω–∏—é)

            ext = info_dict.get('ext', 'mp4')
            new_filename = f"{title}.{ext}"
            new_filepath = os.path.join(output_path, new_filename)

            os.rename(original_path, new_filepath)

            full_path = os.path.abspath(new_filepath)
            logger.info(f"–í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {full_path}")
            return full_path

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            return None


def get_vk_video_info(video_url, retries=2, delay=3):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Å VK —á–µ—Ä–µ–∑ yt-dlp.
    –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ–ø—ã—Ç–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ 'No video formats found'.

    :param video_url: –°—Å—ã–ª–∫–∞ –Ω–∞ VK –≤–∏–¥–µ–æ
    :param retries: –ö–æ–ª-–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2)
    :param delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    :return: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∏–¥–µ–æ –∏–ª–∏ None
    """

    ydl_opts = {
        'quiet': True,
        'skip_download': True,
        'format': 'best',  # –±–µ—Ä–µ–º –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤–∏–¥–µ–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        # 'proxy': 'socks5h://[::1]:2080',
    }

    for attempt in range(retries + 1):
        try:
            with YoutubeDL(ydl_opts) as ydl:
                video_info = ydl.extract_info(video_url, download=False)
                return video_info

        except Exception as e:
            error_msg = str(e)
            logger.error(f"[–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries + 1}] yt-dlp error: {error_msg}")

            if "No video formats found" in error_msg and attempt < retries:
                logger.warning(f"‚è≥ –í–∏–¥–µ–æ –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–æ. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {delay} —Å–µ–∫...")
                time.sleep(delay)
            else:
                break

    # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    # try:
    #     html = requests.get(video_url).text
    #     with open("vk_debug.html", "w", encoding="utf-8") as f:
    #         f.write(html)
    #     logger.info("üíæ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã VK —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ vk_debug.html")
    # except Exception as html_e:
    #     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å HTML: {html_e}")

    return None


if __name__ == "__main__":
    # video_link = "https://vk.com/video-191849492_456239682"
    video_link = "https://www.youtube.com/watch?v=LrI62HmR5vc"

    # ~~~ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ ~~~
    video_info = get_vk_video_info(video_link)
    logger.info(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ '{video_info.get('title')}':\n"
                f" {video_info.get('duration')} —Å–µ–∫.\n"
                )
    # pprint(video_info)

    # ~~~ –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ ~~~
    download_vk_video(video_link)
